'''2. Выполнить логические побитовые операции «И», «ИЛИ» и др. над числами 5 и 6.
 Выполнить над числом 5 побитовый сдвиг вправо и влево на два знака. Объяснить полученный результат.'''

num_1 = 5
num_2 = 6

#посмотрим на числа в двоичном представлении.
print(bin(num_1))
print(bin(num_2))

#Побитовое И
#Сравниваются оба числа в битовом представлении и в результат идет результать применения "И"
# к каждому биту каждого из операндов. То есть 1 и 0 будет 0. 1 и 1 будет 1. Результирующее число в битах
#приводится к десятеричному предсталению.
bit_and = num_1 & num_2

#Побитовое ИЛИ
#Сравниваются оба числа в битовом представлении и в результат идет результат применения "ИЛИ"
# к каждому биту каждого из операндов. То есть 1 или 0 будет 1. 1 или 1 будет 1. Результирующее число в битах
#приводится к десятеричному предсталению.
bit_or = num_1 | num_2

#Побитовое исключающее ИЛИ
#Сравниваются оба числа в битовом представлении и в результат идет результат применения "исключающего ИЛИ"
# к каждому биту каждого из операндов. То есть 1 или 0 будет 1. 1 или 1 будет 0
# (один и только один из сравниваемых битов должен быть равен 1). Результирующее число в битах
#приводится к десятеричному предсталению.
bit_xor = num_1 ^ num_2

# ~ битовое ОТРИЦАНИЕ (NOT) Битовое отрицание числа — это число,
# полученное из исходного заменой всех нулей на единицы и наоборот.
bit_not_num_1 = ~ num_1
bit_not_num_2 = ~ num_2

#Выполнить над числом 5 побитовый сдвиг вправо. Значение левого операнда "сдвигается" вправо
# на количество бит указанных в правом операнде.
#Оператор a >> n возвращает число, которое получается из a сдвигом всех бит на n позиций вправо,
# при этом самые правые n бит отбрасываются.
bit_shift_num_1 = num_1 >> 2

#Аналогично, битовый сдвиг влево на n бит равносилен (для положительных чисел) умножению на 2n
# и осуществляется при помощи оператора <<
bit_shift_left_num_1 = num_1 << 2

print(f'Резулат операции "Побитовое И" для чисел {num_1} и {num_2} равен {bit_and}, '
      f'в двоичном выражении: {bin(bit_and)}')

print(f'Резулат операции "Побитовое ИЛИ" для чисел {num_1} и {num_2} равен {bit_or}, '
      f'в двоичном выражении: {bin(bit_or)}')

print(f'Резулат операции "Побитовое исключающее ИЛИ" для чисел {num_1} и {num_2} равен {bit_xor}, '
      f'в двоичном выражении: {bin(bit_xor)}')

print(f'Резулат операции "битовое ОТРИЦАНИЕ (NOT)" для числа {num_1} равен {bit_not_num_1}, '
      f'в двоичном выражении: {bin(bit_not_num_1)}')
print(f'Резулат операции "битовое ОТРИЦАНИЕ (NOT)" для числа {num_2} равен {bit_not_num_2}, '
      f'в двоичном выражении: {bin(bit_not_num_2)}')

print(f'Резулат операции "Побитовый сдвиг вправо" для числа {num_1} равен {bit_shift_num_1}, '
      f'в двоичном выражении: {bin(bit_shift_num_1)}')

print(f'Резулат операции "Побитовый сдвиг влево" для числа {num_1} равен {bit_shift_left_num_1}, '
      f'в двоичном выражении: {bin(bit_shift_left_num_1)}')
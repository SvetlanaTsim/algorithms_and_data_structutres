'''
1. Подсчитать, сколько было выделено памяти под переменные
в ранее разработанных программах в рамках первых трех уроков.
Проанализировать результат и определить программы с наиболее эффективным использованием памяти.

Примечание: Для анализа возьмите любые 1-3 ваших программы или несколько вариантов
кода для одной и той же задачи. Результаты анализа вставьте в виде комментариев к коду.
Также укажите в комментариях версию Python и разрядность вашей ОС.

Python 3.9.4
Windows 10  64-разрядная ОС, процессор x64

возьмем задачу 2.7, так как для нее есть 2 алгоритма:

7. Напишите программу, доказывающую или проверяющую,
 что для множества натуральных чисел выполняется равенство: 1+2+...+n = n(n+1)/2,
 где n - любое натуральное число.
'''
import sys

#вариант 1
def first_part(n):
    if n == 1:
        return 1
    elif n > 0:
        return n + first_part(n - 1)
    else:
        return -1

def second_part(n):
    return n * (n + 1 ) // 2

def check_func():
    n = 1
    #сделаем проверку до 995, потом ломается
    while n < 995:
        if first_part(n) == second_part(n):
            print(f'Для n {n} - True')
        else:
            print(f'Для n {n} - False')
            break
        n = n + 1

#2 вариант
def first_part_no_rec(n):
    return sum(list(range(n + 1)))

def second_part_v_2(n):
    return n * (n + 1 ) // 2

def new_check_func():
    global n
    n = 1
    #сделаем проверку до 995, потом ломается
    while n < 995:
        if first_part_no_rec(n) == second_part_v_2(n):
            print(f'Для n {n} - True')
        else:
            print(f'Для n {n} - False')
            break
        n = n + 1


#16
print(sys.getsizeof(check_func()))
#136
print(sys.getsizeof(check_func))
#16
print(sys.getsizeof(new_check_func()))
#136
print(sys.getsizeof(new_check_func))
#28
print(sys.getsizeof(n))

'''
Получается, что запущенная функция в обоих случаях занимает 16 байт (это видимо размер как раз числа, выводит функция), 
а просто объект функция занимает 136 байт в обоих случаях.
Нужно еще посчитать размер переменных. 
Тут получается, что мы не храним переменных, кроме переменной n в функциях check_func и new_check_func
Ее размер 28 байт - размер числа int)
Вывод - в части хранения переменных оба алгоритма занимают одинаковое количество места.
С точки зрения времени выполнения вариант 2, не содержащий рекурсию, выполняется быстрее. 
Это рассматривалось в задании 4_1
'''

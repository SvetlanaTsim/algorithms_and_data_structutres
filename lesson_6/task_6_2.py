'''
1. Подсчитать, сколько было выделено памяти под переменные
в ранее разработанных программах в рамках первых трех уроков.
Проанализировать результат и определить программы с наиболее эффективным использованием памяти.

Примечание: Для анализа возьмите любые 1-3 ваших программы или несколько вариантов
кода для одной и той же задачи. Результаты анализа вставьте в виде комментариев к коду.
Также укажите в комментариях версию Python и разрядность вашей ОС.

Python 3.9.4
Windows 10  64-разрядная ОС, процессор x64
'''

'''
Задача 1_3. По введенным пользователем координатам двух точек вывести уравнение прямой вида y=kx+b,
проходящей через эти точки.
'''
import sys

x1, y1, x2, y2 = map(float, input('Введите координаты двух точек').split())
print(x1, y1, x2, y2 )

k = round(((y2 - y1) / (x2 - x1)), 2)
b = round((y1 - k * x1), 2)

print(f'Уравнение прямой, проходящей через эти точки: y={k}*x+({b})')
print(f'Размеры переменных следующие:\nx1 {sys.getsizeof(x1)}\ny1 {sys.getsizeof(y1)}\nx2 {sys.getsizeof(x2)}'
      f'\ny2 {sys.getsizeof(y2)}\nk {sys.getsizeof(k)}\nb {sys.getsizeof(b)}  ')
print(f'Количество ссылок на переменные следующее:\nx1 {sys.getrefcount(x1)}\ny1 {sys.getrefcount(y1)}\nx2'
      f' {sys.getrefcount(x2)}\ny2 {sys.getrefcount(y2)}\nk {sys.getrefcount(k)}\nb {sys.getrefcount(b)}  ')

'''Результат:
Размеры переменных следующие:
x1 24
y1 24
x2 24
y2 24
k 24
k 24
b 24  

Получается, размер числа float равен 24 байта. На мой взгляд, алгоритм работает достаточно эффективно, 
Пространственная сложность О(2), так как создаем 2 дополнительные переменные k и b, 
координаты точек мы так или иначе получаем и храним, их не учитываем.
'''

'''
Количество ссылок на переменные следующее:
x1 2
y1 2
x2 2
y2 2
k 2
b 2  
'''
